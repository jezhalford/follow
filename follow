#!/usr/bin/env python

# Copyright (C) 2011 Protec Innovations Ltd. <software@protecinnovations.co.uk>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import pyinotify
import argparse
from argparse import RawTextHelpFormatter
from os import path, system

class Follow(pyinotify.ProcessEvent):

    def my_init(self):
        """
        User init function called by the parent __init__.
        """
        self.__file = None
        self.__len = 0
        self.__command = None

    def set_file(self, file):
        self.__file = file
        self.__len = path.getsize(self.__file)

    def set_command(self, command):
        self.__command = command

    def process_IN_MODIFY(self, event):
        """
        Handle a file modification event (IN_MODIFY).
        """
        new_len = path.getsize(self.__file)
        
        if new_len > self.__len:
            f = open(self.__file)
            f.seek(self.__len)
            diff = f.read(self.__len - new_len)
            print diff,
            f.close()

            self.call_handler(diff)

        self.__len = new_len

    def call_handler(self, diff):
        """
        Call the supplied command, if any.
        """
        if self.__command is not None:
            system(self.parse_command(diff))

    def parse_command(self, diff):
        """
        Parse the variables in the command.
        """

        fullpath = path.abspath(self.__file)
        filename = path.basename(self.__file)

        return self.__command.format(f=filename, F=fullpath, d=diff)


if __name__ == '__main__':

    epilogue = ("\t\t{f}  :   The name of file that has changed.\n" +
               "\t\t{F}  :   The full path of the file that has changed.\n" +
               "\t\t{d}  :   The section of the file that was added as part of the change (if any).\n" +
               "\n\t\t e.g. echo \"{F} has changed to include the following - {d}\"  \n "
               )

    parser = argparse.ArgumentParser(description='Tail a file calling a custom command when it changes', epilog=epilogue, formatter_class=RawTextHelpFormatter)

    parser.add_argument('-c', action="store", dest="c",
        help="Command to call when then file changes. You may use any of the variables detailed below -")

    parser.add_argument('file')

    args = parser.parse_args()

    command = args.c

    file = args.file

    event_handler = Follow()
    watch_manager = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(watch_manager, event_handler)

    event_handler.set_file(file)
    event_handler.set_command(command)

    mask = pyinotify.IN_MODIFY

    watch_manager.add_watch(file, mask)
    notifier.loop()
    